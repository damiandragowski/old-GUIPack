/*
 * MainFrame.java
 *
 * Created on 10 wrzesieñ 2003, 07:13
 */

package GUIPack;
import java.awt.*;
import javax.swing.*;
import javax.swing.filechooser.*;
import java.util.*;
import java.io.*;
import java.net.*;
/**
 *
 * @author  Damian Dr¹gowski
 * Main Frame in which there is everythink
 */
public class MainFrame extends javax.swing.JFrame {
  
    /** Creates new form MainFrame 
     *  create server socket ,and listen on it.
     */
    public MainFrame() {
        initComponents();
        loadServers();  
        loadShared();
        initAnother();
        TCPServer server = new TCPServer(confDialog.getPortNumber(),this);
        server.start();
        try
        {
            myOwn = InetAddress.getLocalHost().getHostAddress();
        } 
        catch ( UnknownHostException e )
        {
            JOptionPane.showMessageDialog( this, "Niestety nie jest mozliwe pobranie adresu\n lokalnego, porgram sie teraz zakonczy", "Blad", JOptionPane.ERROR_MESSAGE);                                                
            System.exit(0);
        }
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jLabel6 = new javax.swing.JTextArea();
        jPanel2 = new javax.swing.JPanel();
        jTextField4 = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList2 = new javax.swing.JList();
        jButton5 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jList3 = new javax.swing.JList();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        jMenuMotiv = new javax.swing.JMenu();
        editMenu = new javax.swing.JMenu();
        cutMenuItem = new javax.swing.JMenuItem();
        copyMenuItem = new javax.swing.JMenuItem();
        pasteMenuItem = new javax.swing.JMenuItem();
        deleteMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        aboutMenuItem = new javax.swing.JMenuItem();

        getContentPane().setLayout(null);

        setTitle(java.util.ResourceBundle.getBundle("GUIPack/resourceGUI").getString("title"));
        setIconImage(LoadImage("./images/1.ico"));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        jPanel1.setLayout(null);

        jLabel1.setText("dostepne komputery:");
        jPanel1.add(jLabel1);
        jLabel1.setBounds(10, 10, 160, 16);

        jLabel2.setText("Dodanie reczne:");
        jPanel1.add(jLabel2);
        jLabel2.setBounds(290, 40, 100, 16);

        jTextField1.setToolTipText("Wpisz address servera");
        jPanel1.add(jTextField1);
        jTextField1.setBounds(320, 60, 100, 20);

        jLabel3.setText("IP:");
        jPanel1.add(jLabel3);
        jLabel3.setBounds(290, 60, 20, 16);

        jLabel4.setText("port:");
        jPanel1.add(jLabel4);
        jLabel4.setBounds(430, 60, 30, 16);

        jTextField2.setToolTipText("Wpisz port servera");
        jPanel1.add(jTextField2);
        jTextField2.setBounds(460, 60, 50, 20);

        jLabel5.setText("Nazwa:");
        jPanel1.add(jLabel5);
        jLabel5.setBounds(290, 90, 41, 16);

        jTextField3.setToolTipText("Wpisz nazwe servera");
        jPanel1.add(jTextField3);
        jTextField3.setBounds(340, 90, 170, 20);

        jButton1.setText("Dodaj serwer");
        jButton1.setToolTipText("Dodaje do listy serwerow");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jPanel1.add(jButton1);
        jButton1.setBounds(290, 120, 110, 20);

        jPanel3.setLayout(new java.awt.BorderLayout());

        jList1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jList1MouseClicked(evt);
            }
        });

        jScrollPane1.setViewportView(jList1);

        jPanel3.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel1.add(jPanel3);
        jPanel3.setBounds(10, 40, 270, 250);

        jButton3.setText("Dodaj plik");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jPanel1.add(jButton3);
        jButton3.setBounds(290, 150, 90, 20);

        jButton4.setText("Usun plik");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jPanel1.add(jButton4);
        jButton4.setBounds(400, 150, 100, 20);

        jLabel6.setBackground(new java.awt.Color(204, 204, 204));
        jLabel6.setEditable(false);
        jLabel6.setBorder(new javax.swing.border.TitledBorder("Informacja"));
        jScrollPane3.setViewportView(jLabel6);

        jPanel1.add(jScrollPane3);
        jScrollPane3.setBounds(290, 180, 220, 110);

        jTabbedPane1.addTab("Polaczenia", jPanel1);

        jPanel2.setLayout(null);

        jTextField4.setText("test.txt");
        jPanel2.add(jTextField4);
        jTextField4.setBounds(130, 20, 180, 20);

        jLabel8.setText("Podaj nazwe pliku:");
        jPanel2.add(jLabel8);
        jLabel8.setBounds(10, 20, 110, 16);

        jButton2.setText("Szukaj");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jPanel2.add(jButton2);
        jButton2.setBounds(340, 20, 80, 20);

        jList2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jList2MouseClicked(evt);
            }
        });

        jScrollPane2.setViewportView(jList2);

        jPanel2.add(jScrollPane2);
        jScrollPane2.setBounds(10, 50, 510, 240);

        jButton5.setText("Czy\u015b\u0107");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jPanel2.add(jButton5);
        jButton5.setBounds(440, 20, 68, 20);

        jTabbedPane1.addTab("Wyszukiwanie", jPanel2);

        jPanel4.setLayout(null);

        jLabel7.setText("Pliki kt\u00f3re obecnie s\u0105 \u015bci\u0105gane lub zosta\u0142y \u015bci\u0105gni\u0119te");
        jPanel4.add(jLabel7);
        jLabel7.setBounds(10, 10, 340, 16);

        jScrollPane4.setViewportView(jList3);

        jPanel4.add(jScrollPane4);
        jScrollPane4.setBounds(13, 30, 500, 250);

        jTabbedPane1.addTab("\u015aci\u0105ganie", jPanel4);

        getContentPane().add(jTabbedPane1);
        jTabbedPane1.setBounds(0, 0, 530, 330);

        fileMenu.setText("Opcje");
        openMenuItem.setText("Konfiguracja");
        openMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuItemActionPerformed(evt);
            }
        });

        fileMenu.add(openMenuItem);

        exitMenuItem.setText("Wyj\u015bcie");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });

        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        jMenuMotiv.setText("Motywy");
        menuBar.add(jMenuMotiv);

        editMenu.setText("Edycja");
        cutMenuItem.setText("Cut");
        editMenu.add(cutMenuItem);

        copyMenuItem.setText("Copy");
        editMenu.add(copyMenuItem);

        pasteMenuItem.setText("Paste");
        editMenu.add(pasteMenuItem);

        deleteMenuItem.setText("Delete");
        editMenu.add(deleteMenuItem);

        menuBar.add(editMenu);

        helpMenu.setText("Pomoc");
        aboutMenuItem.setText("informacja");
        aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutMenuItemActionPerformed(evt);
            }
        });

        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        pack();
    }//GEN-END:initComponents

    /**
     * this is method for button2
     */
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // Add your handling code here:
        String fileToFind = jTextField4.getText();
        Address addr = new Address();
        addr.setName("local");
        addr.setPort(confDialog.getPortNumber());
        addr.setAddress(myOwn);
        SearchThread searchThread = new SearchThread(fileToFind, this, 2, addr);
        searchThread.start();
    }//GEN-LAST:event_jButton2ActionPerformed

    /*
     * @return sared files Vector ( with String )
     */
    synchronized public Vector getSharedFiles()
    {
        return sharedFiles;
    }

    /*
     * @return Vector with Address class
     */
    synchronized public Vector getServers()
    {
        return model;
    }
    /**
     * this is method for button5
     */
    
    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        model2.removeAllElements();    
        jList2.setListData(model2);
        jScrollPane2.revalidate();
        jScrollPane2.repaint();
    }//GEN-LAST:event_jButton5ActionPerformed
    /**
     * this is method for menu anout
     */
    private void aboutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutMenuItemActionPerformed
        // Add your handling code here:
        JOptionPane.showMessageDialog( this, "Program jest programem freeware\nAutor: Damian Dr¹gowski\nCel powstania: Zaliczenie z Javy\n\nprogram jest wielowatkowym serwerem ,a zarazem klientem, ma rozproszony system wyszukiwania.\nSciagnie pliku jest na oddzielnych watkach.", "Informacja", JOptionPane.INFORMATION_MESSAGE);                    
    }//GEN-LAST:event_aboutMenuItemActionPerformed

    private void openMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuItemActionPerformed
        // Add your handling code here:
        confDialog.show();
    }//GEN-LAST:event_openMenuItemActionPerformed
    /**
     * this is method is called when e clicked on JList
     */

    private void jList1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jList1MouseClicked
        if ( evt.BUTTON3 == evt.getButton() )
        {
            popMenu1.show(evt.getComponent(), evt.getX(), evt.getY());
        }
        else
        {        

            popMenu1.setVisible(false);            
        }
    }//GEN-LAST:event_jList1MouseClicked
    /**
     * this is method for button4
     */
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // Add your handling code here:
        GUIPack.EraseDialog dial = new GUIPack.EraseDialog(this, true, sharedFiles);
        dial.show();
    }//GEN-LAST:event_jButton4ActionPerformed
    /**
     * this is method for button3
     */
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        int returnVal = fc.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            //This is where a real application would open the file.
            jLabel6.append("dodano: " + file.getName()+newline);
            sharedFiles.addElement((Object) file.getAbsolutePath());
        } else {
            jLabel6.append("anulowano dodanie"+newline);
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jList2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jList2MouseClicked
        // Add your handling code here:
        if ( evt.BUTTON3 == evt.getButton() )
        {
            popMenu.show(evt.getComponent(), evt.getX(), evt.getY());
        }
        else
        {
            popMenu.setVisible(false);            
        }
    }//GEN-LAST:event_jList2MouseClicked
    /**
     * this is method for button1
     */
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // Add your handling code here:
        Address addr = new Address();
        addr.setName(jTextField3.getText());
        if ( jTextField1.getText() != "" )
        {
            addr.setAddress(jTextField1.getText());
        try
        {
            int port = Integer.parseInt(jTextField2.getText());
            addr.setPort(port);
            if ( addr != null )
                model.addElement((Object) addr);
            jList1.setListData(model);
            jScrollPane1.revalidate();
            jScrollPane1.repaint();
            jTextField1.setText("");
            jTextField2.setText("");
            jTextField3.setText("");
            jLabel6.append("Serwer zostal dodany do listy"+newline);
        }
        catch(NullPointerException ex1)
        {
            JOptionPane.showMessageDialog( this, "nie podales portu", "Blad", JOptionPane.ERROR_MESSAGE);                                    
        }
        catch(NumberFormatException ex2)
        {
            JOptionPane.showMessageDialog( this, "Zly port, zle wpisales", "Blad", JOptionPane.ERROR_MESSAGE);                                    
        }
        } else {
            JOptionPane.showMessageDialog( this, "nie podales adresu servera", "Blad", JOptionPane.ERROR_MESSAGE);                                                
        }
    }//GEN-LAST:event_jButton1ActionPerformed
    /**
     * this is method when we clicked exit in menu, save all and exit
     */      
    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        saveServers();
        saveConf();
        saveShared();
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed
    
    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        saveServers();
        saveShared();
        saveConf();        
        System.exit(0);
    }//GEN-LAST:event_exitForm
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        MainFrame m;        
        m = new MainFrame();
        m.InitMenu();
        m.setSize(535, 370);
        m.show();
    }
    /**
     * this is method which is called when we clicked on checnge motiv menu
     */
    private void MtoviItemClicked(java.awt.event.ActionEvent evt) {
        try {
            UIManager.LookAndFeelInfo [] UIArray = UIManager.getInstalledLookAndFeels();
            for( int i = 0; i < UIArray.length; i++)
                if ( evt.getActionCommand() == UIArray[i].getName() )
                {
                    UIManager.setLookAndFeel(UIArray[i].getClassName());
                    SwingUtilities.updateComponentTreeUI( this );
                }       
        }
        catch (Exception exc) {
	    JOptionPane.showMessageDialog( this, "Niepoprawne za³adowanie Menu", "Blad", JOptionPane.ERROR_MESSAGE);            
        }
    }
    
    /** Initialize menu with look and feel
     * @see
     * Iniialize the menu with all motiv in system
     */    
    public void InitMenu() 
    {
        try {
            UIManager.LookAndFeelInfo [] UIArray = UIManager.getInstalledLookAndFeels();
            MotivMenuItems = new javax.swing.JMenuItem[UIArray.length + 1];
            for( int i = 0; i < UIArray.length; i++)
            {
                MotivMenuItems[i] = new javax.swing.JMenuItem();
                MotivMenuItems[i].setText( UIArray[i].getClassName() );
                jMenuMotiv.add(MotivMenuItems[i]);
                MotivMenuItems[i].addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    MtoviItemClicked(evt);
                }
        });
                
            }
        }
        catch (Exception exc) {
	    JOptionPane.showMessageDialog( this, "Niepoprawne za³adowanie Menu", "Blad", JOptionPane.ERROR_MESSAGE);                        
        }
    }
    /* Load images from file
     * @params fileName ,name of the file which sould be loaded
     */
    public Image LoadImage(java.lang.String fileName) {
       ImageIcon icon = new ImageIcon( fileName );
       if (icon.getImageLoadStatus() == MediaTracker.COMPLETE)
       {
           return icon.getImage();
       }
       else
       {
           return null;
       }
    }
    /*
     * Load servers
     */
    private void loadServers() {
       try {
             GUIPack.FileRead fileRead = new GUIPack.FileRead( new BufferedReader( new FileReader(servName) ) );
             model = fileRead.getAddress();
             jLabel6.append("Plik z adresami za³adowny"+newline);
       }
       catch ( Exception e )
       {
            JOptionPane.showMessageDialog( this, e.toString(), "Blad", JOptionPane.ERROR_MESSAGE);            
       }
    }
    /*
     * save servers
     */
    private void saveServers() {
       try {
             PrintWriter pr = new PrintWriter(new BufferedWriter(new FileWriter("servers.cfg", false))); 
             String line = "";
             for( int i=0; i < model.size();i++)
             { 
                 Address addr = (Address)model.get(i);
                 line = addr.getAddress() + ":" + addr.getName() + ":" + addr.getPort();
                 pr.println(line); 
             }
             pr.close();
       }
       catch ( Exception e )
       {
            JOptionPane.showMessageDialog( this, "Blad przy zapisie do pliku", "Blad", JOptionPane.ERROR_MESSAGE);            
       }
    }
    /* 
     * Load shared.cfg
     */
    private void loadShared() {
       try
       {
            BufferedReader input;        
            input = new BufferedReader( new FileReader(sharedName) ); 
            String s = "" ;
            while ( ( s = input.readLine() ) != null )
            {
                sharedFiles.addElement((Object) s);
            }
            jLabel6.append("Plik shared.cfg zaladowny" + newline);            
       }
       catch ( Exception e )
       {
            JOptionPane.showMessageDialog( this, e.toString(), "Blad", JOptionPane.ERROR_MESSAGE);            
            jLabel6.append("Plik shared.cfg nie zaladowny" + newline);
       }
    }
    /* 
     * Save shared.cfg
     */
    public void saveShared() {
       try {
             PrintWriter pr = new PrintWriter(new BufferedWriter(new FileWriter("shared.cfg", false))); 
             String line = "";
             for( int i=0; i < sharedFiles.size();i++)
             { 
                 line = (String)sharedFiles.get(i);
                 if ( line != null )
                    pr.println(line); 
             }
             pr.close();
       }
       catch ( Exception e )
       {
            JOptionPane.showMessageDialog( this, "Blad przy zapisie do pliku shared.cfg", "Blad", JOptionPane.ERROR_MESSAGE);            
       }
        
    }
    
    /*
     * This method is called in constructor of this class ,and initilaize every think else
     */
    public void initAnother() {
        jList1.setCellRenderer(new CellRenderer());
        jList2.setCellRenderer(new CellRender());
        popMenu = new JPopupMenu();
        delMenuItem = new JMenuItem();
        delMenuItem.setText("Usun z listy");
        delMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delMenuItemActionPerformed(evt);
            }
        });        
        
        downloadMenuItem = new JMenuItem();
        downloadMenuItem.setText("ci¹gnij plik");
        downloadMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downloadMenuItemActionPerformed(evt);
            }
        });        
        
        popMenu.add(delMenuItem);
        popMenu.add(downloadMenuItem);
        popMenu.setVisible(false);
        jList2.add(popMenu);
        
        popMenu1 = new JPopupMenu();
        delMenuItem1 = new JMenuItem();
        delMenuItem1.setText("Usun server");
        delMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delMenuItem1ActionPerformed(evt);
            }
        });        
        showMenuItem1 = new JMenuItem();
        showMenuItem1.setText("Pokaz pliki");
        showMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showMenuItem1ActionPerformed(evt);
            }
        });        
        
        popMenu1.add(delMenuItem1);
        popMenu1.add(showMenuItem1);        
        popMenu1.setVisible(false);
        
        
        jList1.add(popMenu1);
        jList1.setListData(model);
        jScrollPane1.revalidate();
        jScrollPane1.repaint();
        confDialog.setVisible(false);
        
        try
        {
            BufferedReader input;        
            input = new BufferedReader( new FileReader(confName) ); 
            String s = input.readLine();
            if ( s != null )
            {
                try
                {
                    confDialog.setPortNumber(Integer.parseInt(s));
                }
                catch( NumberFormatException e )
                {
                    confDialog.setPortNumber(4422);
                }
                s = input.readLine();
                if ( s != null )
                {
                    confDialog.setDirectory(s);
                    jLabel6.append("Plik conf.cfg zaladowny" + newline);                                
                }
            }
        }
        catch ( Exception e )
        {
            JOptionPane.showMessageDialog( this, e.toString(), "Blad", JOptionPane.ERROR_MESSAGE);            
            jLabel6.append("Plik conf.cfg nie zaladowny" + newline);
        }
        jList3.setModel(listModel);
    }

    private void delMenuItemActionPerformed(java.awt.event.ActionEvent evt) 
    {
        model2.remove(jList2.getSelectedIndex());
        jScrollPane1.revalidate();
        jScrollPane1.repaint();
    }

    private void downloadMenuItemActionPerformed(java.awt.event.ActionEvent evt) 
    {
        FindResult findResult = ( FindResult ) model2.get(jList2.getSelectedIndex());
        model2.remove(jList2.getSelectedIndex());
        jScrollPane1.revalidate();
        jScrollPane1.repaint();
        // downloading has started
        DownloadClient downloadClient = new DownloadClient(this, findResult);
        downloadClient.start();        
    }
    private void delMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) 
    {
        model.remove(jList1.getSelectedIndex());
        jScrollPane1.revalidate();
        jScrollPane1.repaint();
    }
    
    private void showMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) 
    {
        // z tym mam  wywolac liste plikow jList1.getSelectedIndex()
        int iSelected = jList1.getSelectedIndex();
        Address addr = (Address)model.get(iSelected);
        ListClient cli = new ListClient(this, addr);
        cli.start();
    }
    /** Get vector with sharedfiles
     */
    synchronized public Vector getFileList() 
    {
        return sharedFiles;
    }
    /**
     * Get log handle
     */
    synchronized public JTextArea getLog() {
        return jLabel6;
    }
    /** Save configuration
     */
    public void saveConf() {
       try {
             PrintWriter pr = new PrintWriter(new BufferedWriter(new FileWriter(confName, false))); 
             pr.println(confDialog.getPortNumber()); 
             pr.println(confDialog.getDirectory());              
             pr.close();
       }
       catch ( Exception e )
       {
            JOptionPane.showMessageDialog( this, "Blad przy zapisie do pliku conf.cfg", "Blad", JOptionPane.ERROR_MESSAGE);            
       }
    }
    
    /** Getter for property resultData.
     * @return Value of property resultData.
     *
     */
    synchronized  public Vector getResultData() {
        return model2;
    }
    
    /** Setter for property refresList.
     * @param refresList New value of property refresList.
     *
     */
    synchronized public void setRefresList() {
        jList2.setListData(model2);
        jScrollPane2.revalidate();
        jScrollPane2.repaint();
    }
    
    synchronized public DefaultListModel getDownloadList() {
        return listModel;
    }
    
    /** Getter for property IP.
     * @return Value of property IP.
     *
     */
    synchronized public String getIP() {
        return myOwn;
    }
    
    /** Getter for property port.
     * @return Value of property port.
     *
     */
    synchronized public int getPort() {
        return confDialog.getPortNumber();
    }    
    
    private javax.swing.JMenuItem [] MotivMenuItems;
    private javax.swing.JPopupMenu popMenu;    
    private javax.swing.JMenuItem delMenuItem;    
    private javax.swing.JMenuItem downloadMenuItem;            
    private javax.swing.JPopupMenu popMenu1;    
    private javax.swing.JMenuItem delMenuItem1;    
    private javax.swing.JMenuItem showMenuItem1;        
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JMenuItem copyMenuItem;
    private javax.swing.JMenuItem cutMenuItem;
    private javax.swing.JMenuItem deleteMenuItem;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JTextArea jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JList jList1;
    private javax.swing.JList jList2;
    private javax.swing.JList jList3;
    private javax.swing.JMenu jMenuMotiv;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JMenuItem pasteMenuItem;
    // End of variables declaration//GEN-END:variables

    private java.util.Vector model = new Vector();
    
    private java.util.Vector model2 = new Vector();
    
    private DefaultListModel listModel = new DefaultListModel();

    private String servName = "servers.cfg";
    
    private String sharedName = "shared.cfg";    
    
    private String confName = "conf.cfg";        
    
    private Vector sharedFiles = new Vector();
    
    private final JFileChooser fc = new JFileChooser();
    
    private final String newline = "\n";
    
    /** This variable is for hiden conf dialog
     */
    public ConfDialog confDialog = new ConfDialog(this,  false);
    
    private String myOwn = "";
    
}
